// Copyright (c) 2015 Titanium I.T. LLC. All rights reserved. For license, see "README" or "LICENSE" file.
"use strict";

// A small modification to Chai. Why? Just to demonstrate how you can customize an assertion library
// without writing it all yourself. And because Chai isn't perfect.

const assert = require("chai").assert;

// 'module.exports = assert' doesn't work because any changes would change the functions Chai uses, too.
// So we use {...} to do a shallow copy instead.
module.exports = exports = { ...assert };

// By default, Chai's assert.equal does type conversions. DO. NOT. WANT.
exports.equal = assert.strictEqual;

exports.throwsAsync = async function(fnAsync, expectedRegexOrExactString, message) {
	try {
		await fnAsync();
	}
	catch (err) {
		if (expectedRegexOrExactString === undefined) return;
		if (typeof expectedRegexOrExactString === "string") {
			exports.equal(err.message, expectedRegexOrExactString, message);
		}
		else {
			exports.match(err.message, expectedRegexOrExactString, message);
		}
		return;
	}
	fail(message, "Expected exception");
};

exports.doesNotThrowAsync = async function(fnAsync) {
	await fnAsync();
};

exports.promiseResolvesAsync = async function(promise, message) {
	const promiseResolves = await doesPromiseResolve(promise);
	if (!promiseResolves) fail(message, "Expected promise to resolve, but it didn't");
};

exports.promiseDoesNotResolveAsync = async function(promise, message) {
	const promiseResolves = await doesPromiseResolve(promise);
	if (promiseResolves) fail(message, "Expected promise to not resolve, but it did");
};



async function doesPromiseResolve(promise) {
	let promiseResolved = false;
	promise.then(() => {
		promiseResolved = true;
	});

	await drainEventLoopAsync();
	return promiseResolved;
}

async function drainEventLoopAsync() {
	await new Promise((resolve, reject) => {
		// We call setImmediate() twice because some callbacks are executed after setImmediate.
		setImmediate(() => {
			setImmediate(resolve);
		});
	});
}

function fail(userMessage, assertionMessage) {
	userMessage = userMessage ? `${userMessage}: ` : "";
	exports.fail(`${userMessage}${assertionMessage}`);
}