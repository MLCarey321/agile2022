// Copyright Titanium I.T. LLC.
"use strict";

const assert = require("util/assert");
const CommandLine = require("./command_line");
const testHelper = require("util/test_helper");
// dependency_analysis: ./_command_line_test_args_runner
// dependency_analysis: ./_command_line_test_null_output_runner
// dependency_analysis: ./_command_line_test_output_runner

describe.only("CommandLine", () => {

	it.skip("provides command-line arguments", async () => {
		/* CHALLENGE #1: Testing infrastructure with narrow integration tests
		 *
		 * Infrastructure can be tricky to test because it often involves complicated setup. In the case of the
		 * CommandLine infrastructure wrapper, tests have to be run in a separate process. I've simplified the
		 * challenge by providing the tests already.
		 *
		 * This is a simplified version of what this test is doing:
		 *    const process = runProcess("my arg 1", "my arg 2");
		 *    assert.deepEqual(process.args(), [ "my arg 1", "my arg 2" ];
		 *
		 * Remove the ".skip" from this test and implement CommandLine.args().
		 *
		 * Hints:
		 *
		 * 1. In Node.js, process arguments are provided by the "process" global. Specifically, in "process.argv".
		 *
		 * 2. The first two arguments will be the "node" and the name of the file. The real arguments come after that.
		 * You'll need to strip out the first two arguments. One way to do so is "process.argv.slice(2)".
		 *
		 */

		const args = [ "my arg 1", "my arg 2" ];
		const { stdout } = await testHelper.runModuleAsync(
			__dirname,
			"./_command_line_test_args_runner.js",
			{ args }
		);
		assert.equal(stdout, '["my arg 1","my arg 2"]');
	});

	it.skip("writes to stdout and stderr", async () => {
		const { stdout, stderr } = await testHelper.runModuleAsync(
			__dirname,
			"./_command_line_test_output_runner.js",
			{ failOnStderr: false }
		);
		assert.equal(stdout, "my stdout", "stdout");
		assert.equal(stderr, "my stderr", "stderr");
	});

	it.skip("tracks writes to stdout and stderr", () => {
		const commandLine = CommandLine.createNull();
		const stdout = commandLine.trackStdout();
		const stderr = commandLine.trackStderr();

		commandLine.writeStdout("my stdout");
		commandLine.writeStderr("my stderr");
		assert.deepEqual(stdout, [ "my stdout" ]);
		assert.deepEqual(stderr, [ "my stderr" ]);
	});


	describe("Nullability", () => {

		it.skip("doesn't write output to command line", async () => {
			const { stdout, stderr } = await testHelper.runModuleAsync(
				__dirname,
				"./_command_line_test_null_output_runner.js",
				{ failOnStderr: false }
			);
			assert.equal(stdout, "", "stdout");
			assert.equal(stderr, "", "stderr");
		});

		it.skip("defaults to no arguments", () => {
			const commandLine = CommandLine.createNull();
			assert.deepEqual(commandLine.args(), []);
		});

		it.skip("allows arguments to be configured", () => {
			const commandLine = CommandLine.createNull({ args: [ "one", "two" ]});
			assert.deepEqual(commandLine.args(), [ "one", "two" ]);
		});

	});

});


