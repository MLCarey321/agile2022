// Copyright Titanium I.T. LLC.
"use strict";

const assert = require("util/assert");
const HttpResponse = require("./http_response");

describe("HttpResponse", () => {

	describe("generic factory", () => {

		it("has status code, headers, and body", () => {
			const response = HttpResponse.create({
				status: 999,
				headers: { "my-header": "my-value" },
				body: "my body",
			});

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, "my body", "body");
			assert.deepEqual(response.headers, { "my-header": "my-value" }, "headers");
		});

		it("headers are optional", () => {
			const response = HttpResponse.create({
				status: 999,
				body: "my body",
			});

			assert.deepEqual(response.headers, {});
		});

		it("has optional and inaccessible 'debug' field purely for purpose of viewing in failed tests", () => {
			const response = HttpResponse.create({
				status: 999,
				body: "irrelevant-body",
				debug: "my debug field",
			});

			assert.equal(response._debug, "my debug field");
		});

		it("doesn't change response headers when original header object changes", () => {
			const headers = { "my-header": "my-value" };
			const response = HttpResponse.create({
				status: 999,
				body: "irrelevant body",
				headers,
			});

			headers["new-header"] = "should not appear in response";
			assert.deepEqual(response.headers, { "my-header": "my-value" });
		});

	});


	describe("Plain text factory", () => {

		it("has status code, headers, body, and debug field", () => {
			const response = HttpResponse.createPlainTextResponse({
				status: 999,
				headers: { "my-header": "my-value" },
				body: "my body",
				debug: "my debug",
			});

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, "my body", "body");
			assert.deepEqual(response.headers, {
				"content-type": "text/plain; charset=utf-8",
				"my-header": "my-value",
			}, "headers");
			assert.equal(response._debug, "my debug");
		});

		it("headers are optional", () => {
			const response = HttpResponse.createPlainTextResponse({
				status: 999,
				body: "irrelevant-body",
			});

			assert.deepEqual(response.headers, { "content-type": "text/plain; charset=utf-8" });
		});

		it("allows caller to override content-type header", () => {
			const response = HttpResponse.createPlainTextResponse({
				status: 999,
				headers: { "content-type": "overridden" },
				body: "irrelevant-body",
			});

			assert.deepEqual(response.headers, { "content-type": "overridden" });
		});

	});


	describe("JSON factory", () => {

		it("has status code, headers, body object, and debug field", () => {
			const response = HttpResponse.createJsonResponse({
				status: 999,
				headers: { "my-header": "my-value" },
				body: { "my-json": "my-body" },
				debug: "my debug",
			});

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, JSON.stringify({ "my-json": "my-body" }), "body");
			assert.deepEqual(response.headers, {
				"content-type": "application/json",
				"my-header": "my-value",
			}, "headers");
			assert.equal(response._debug, "my debug");
		});

		it("headers are optional", () => {
			const response = HttpResponse.createJsonResponse({
				status: 999,
				body: { "irrelevant-body": "" },
			});

			assert.deepEqual(response.headers, { "content-type": "application/json" });
		});

		it("allows caller to override content-type header", () => {
			const response = HttpResponse.createJsonResponse({
				status: 999,
				headers: { "content-type": "overridden" },
				body: { "irrelevant-body": "" },
			});

			assert.deepEqual(response.headers, { "content-type": "overridden" });
		});

	});

});