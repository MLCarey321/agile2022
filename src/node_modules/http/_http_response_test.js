// Copyright Titanium I.T. LLC.
"use strict";

const assert = require("util/assert");
const HttpResponse = require("./http_response");

describe("HttpResponse", () => {

	describe("generic factory", () => {

		it("has status code, headers, and body", () => {
			const response = HttpResponse.create(
				999,
				"my body",
				{ "my-header": "my-value" },
			);

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, "my body", "body");
			assert.deepEqual(response.headers, { "my-header": "my-value" }, "headers");
		});

		it("headers are optional", () => {
			const response = HttpResponse.create(
				999,
				"my body",
			);

			assert.deepEqual(response.headers, {});
		});

		it("doesn't change response headers when original header object changes", () => {
			const headers = { "my-header": "my-value" };
			const response = HttpResponse.create(
				501,
				"irrelevant body",
				headers,
			);

			headers["new-header"] = "should not appear in response";
			assert.deepEqual(response.headers, { "my-header": "my-value" });
		});

	});


	describe("JSON factory", () => {

		it("has status code and body object", () => {
			const response = HttpResponse.createJsonResponse(
				999,
				{ "my-json": "my-body" },
				{ "my-header": "my-value" },
			);

			assert.equal(response.status, 999, "status");
			assert.equal(response.body, JSON.stringify({ "my-json": "my-body" }), "body");
			assert.deepEqual(response.headers, {
				"content-type": "application/json",
				"my-header": "my-value",
			}, "headers");
		});

		it("allows caller to override content-type header", () => {
			const response = HttpResponse.createJsonResponse(
				999,
				{ "irrelevant-body": "" },
				{ "content-type": "overridden" }
			);

			assert.deepEqual(response.headers, { "content-type": "overridden" });
		});

	});

});